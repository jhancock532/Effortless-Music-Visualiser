class MusicVisualiser{constructor(){this._audioInputElement,this._audioPlayerElement,this._soundFileURL,this._numberOfBars=256,this._fftSize=1024,this._smoothingConstant=0.8,this._paused=!0,this._waitingAnimation=!0,this.bars=[],this.soundDataArray=void 0,this.MAX_SOUND_VALUE=256,this.updateRequests=0,this.audioContext=this.getAudioContext(),this.analyser=this.audioContext.createAnalyser(),this.webAudioContextNotSupported=!1}set numberOfBars(a){try{if("number"!=typeof a)throw`bars.js : Number of bars should be of type number. Instead, it's ${typeof a}`;if(a=Math.ceil(a),0>=a)throw`bars.js : The number of bars (${a}) isn't greater than 0.`;a>this._fftSize/4&&(console.warn(`bars.js : Reduced the number of bars to the max possible size (${this._fftSize/4}) for the current fftSize.`),a=this._fftSize/4),this._numberOfBars=a}catch(b){console.error("bars.js : Error while attempting to set number of bars."),console.error(b)}this.bars=Array(this._numberOfBars).fill(0)}get numberOfBars(){return this._numberOfBars}set audioPlayer(a){try{if("string"!=typeof a)throw`bars.js : The id should be a string. Instead, it's ${typeof a}`;let b=document.getElementById(a);if(b==void 0)throw`bars.js : No input elements with the id ${a} were found.`;if("audio"!==b.tagName.toLowerCase())throw`bars.js : The id is of an element which isn't <audio>, its tag is <${b.tagName.toLowerCase()}>.`;this._audioPlayerElement=b}catch(b){console.error("bars.js : Error while attempting to set audio player element."),console.error(b)}}get audioPlayer(){return this._audioPlayerElement}set audioFileInput(a){try{if("string"!=typeof a)throw`bars.js : The id should be a string. Instead, it's ${typeof a}`;let b=document.getElementById(a);if(b==void 0)throw`bars.js : No input elements with the id ${a} were found.`;if("input"!==b.tagName.toLowerCase())throw`bars.js : The id is of an element which isn't <input>, its tag is <${b.tagName.toLowerCase()}>.`;if("file"!==b.getAttribute("type"))throw`bars.js : The type of the input isn't file. It's ${b.getAttribute("type")}.`;this._audioInputElement=b}catch(b){console.error("bars.js : Error while attempting to set audio input element."),console.error(b)}}get audioFileInput(){this._audioInputElement}set soundFileURL(a){try{if("string"!=typeof a)throw`bars.js : The URL should be a string. Instead, it's ${typeof a}`;this._soundFileURL=a}catch(b){console.error("bars.js : Error while attempting to set the sound file URL."),console.error(b)}}get soundFileURL(){return this._soundFileURL}set fftSize(a){try{if("number"!=typeof a)throw`bars.js : The fftsize should be a number, either 128, 256, 512, 1024 or 2048. Instead, it's a ${typeof a}`;if(!1===[128,256,512,1024,2048].includes(a))throw`bars.js : The fftsize should be a number, either 128, 256, 512, 1024 or 2048.`;this._numberOfBars>a/4&&(this._numberOfBars=a/4,console.warn(`bars.js : Reduced the number of bars to the max possible size for the current fftSize (numberOfBars now equals ${this._numberOfBars}. The largest number of bars possible is equal to the fftSize / 4.`)),this._fftSize=a,!1==(this.analyser===void 0)&&(this.analyser.fftSize=this._fftSize)}catch(c){console.error(`bars.js : An error occurred while trying to set the Fast Fourier Transform (fft) size.`),console.error(c)}}get fftSize(){return this._fftSize}set smoothingConstant(a){try{if("number"!=typeof a)throw`bars.js : The smoothing constant should be a number in the range 0 to 1. Instead, it's a ${typeof a}.`;if(0>a||1<a)throw`bars.js : The smoothing constant should be a number in the range 0 to 1. It is currently ${a}.`;this._smoothingConstant=a,!1==(this.analyser===void 0)&&(this.analyser.smoothingTimeConstant=this._smoothingConstant)}catch(b){console.error(`bars.js : An error occured while setting the smoothing constant.`),console.error(b)}}get smoothingConstant(){return this._smoothingConstant}set waitingAnimation(a){this._waitingAnimation=!!a}get waitingAnimation(){return this._waitingAnimation}set paused(a){a?(this._audioPlayerElement.pause(),this._paused=!0):(this._audioPlayerElement.play(),this._paused=!1)}get paused(){return this._paused}getAudioContext(){try{return new(window.AudioContext||window.webkitAudioContext)}catch(a){console.error("bars.js : The Web Audio API is not supported in this browser."),this.webAudioContextNotSupported=!0}}loadAndPlaySoundFile(){let a=this._audioPlayerElement,b=this._audioInputElement,c=new FileReader;c.onload=function(){a.src=this.result,a.controls=!0,a.play()},c.readAsDataURL(b.files[0]),this.createAudioObjects()}playSoundFileFromURL(a){let b=this._audioPlayerElement,c=1===arguments.length?a:this._soundFileURL;try{if(c==void 0)throw"bars.js : The URL to the sound file is undefined.";b.src=c,b.crossOrigin="anonymous",b.controls=!0,b.play()}catch(d){console.error("bars.js : Error when attempting to play a sound file from a URL."),console.error(d)}this.createAudioObjects()}createAudioObjects(){let a=this._audioPlayerElement,b=this.audioContext,c=this.analyser,d=b.createMediaElementSource(a);d.connect(c),c.fftSize=this._fftSize,c.smoothingTimeConstant=this._smoothingConstant,c.connect(b.destination);let f=c.frequencyBinCount;this.soundDataArray=new Uint8Array(f),this._paused=!1}getSampleOfSoundData(a,b){let c=Math.floor(this.soundDataArray.length/2/b),g=0;for(let j=a*c;j<(a+1)*c;j++)g+=this.soundDataArray[j];let h=g/c;return h/this.MAX_SOUND_VALUE}getAmplitude(){if(!1==(this.soundDataArray===void 0)){let a=0;for(let c=0;c<this.soundDataArray.length;c++)a+=this.soundDataArray[c];let b=a/this.soundDataArray.length;return b/this.MAX_SOUND_VALUE}return 0}getBass(){return!1==(void 0===this.soundDataArray)?this.getSampleOfSoundData(0,12):0}getMidrange(){return!1==(void 0===this.soundDataArray)?this.getSampleOfSoundData(1,3):0}getTreble(){return!1==(void 0===this.soundDataArray)?this.getSampleOfSoundData(2,3):0}updateVisualiser(){!1==(this.soundDataArray===void 0)&&this.analyser.getByteFrequencyData(this.soundDataArray),this.updateBarHeights(),this.updateRequests++,this._audioPlayerElement!=void 0&&(this._paused=this._audioPlayerElement.paused)}updateBarHeights(){let a=0;for(let b=0;b<this._numberOfBars;b++)!1==(void 0===this.soundDataArray)?(a=this.getSampleOfSoundData(b,this._numberOfBars),this.bars[b]=a):this.bars[b]=0,!0===this._paused&&!0===this._waitingAnimation&&(this.bars[b]=0.5+Math.sin((this.updateRequests+4*b*Math.PI)/this._numberOfBars)/4)}}
